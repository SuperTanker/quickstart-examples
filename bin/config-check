#!/usr/bin/env node

const fs = require('fs');
const pathLib = require('path');

const errors = [];

const addError = (message) => errors.push(message);

const objectToModuleSource = (obj) => {
  const jsonMultiline = JSON.stringify(obj, null, 2);
  const jsonMultilineUnquotedKeys = jsonMultiline.replace(/"([^"\s-]+)":/g, "$1:");
  const header = `/* eslint-disable */`
  return `${header}\nmodule.exports = ${jsonMultilineUnquotedKeys};`;
};

const createConfigFile = (config, values, override) => {
  const { keys, fullPath } = config;

  if (override || !fs.existsSync(fullPath)) {
    const data = {};

    keys.forEach(maybeKey => {
      const optional = (maybeKey.slice(-1) === '?');
      const key = optional ? maybeKey.slice(0, -1) : maybeKey;
      if (!optional || key in values) {
        data[key] = values[key];
      }
    });

    fs.writeFileSync(fullPath, objectToModuleSource(data));
  }
};

const checkFilePresent = (file) => {
  const { keys, shortPath, samplePath, fullPath } = file;

  if (fs.existsSync(fullPath)) return true;

  addError([
    `Please create missing file: ${shortPath}`,
    '\nHint:',
    `  cp ${samplePath} ${shortPath}`,
    `  # + edit ${shortPath}`
  ].join('\n'));

  return false;
};

const checkFileContent = (config) => {
  const { keys, shortPath, samplePath, fullPath } = config;
  const content = require(fullPath);

  // Unexpected keys (neither declared as required nor optional)
  Object.keys(content).forEach(key => {
    if (!keys.includes(key) && !keys.includes(key + '?')) {
      if (key === 'trustchainPrivateKey') {
        addError([
          `Security issue: unexpected key "${key}" in ${shortPath}.`,
          `Your ${key} is private and must never be exposed in client applications.`
        ].join('\n\n'))
      } else {
        addError(`Unexpected key "${key}" in ${shortPath}`);
      }
    }
  });

  // Missing non-optional keys
  keys.filter(key => key.slice(-1) !== '?').forEach(key => {
    if (!(key in content)) {
      addError(`Missing key "${key}" in ${shortPath}`);
    } else if (content[key] === '<FIX ME>') {
      addError(`Setup your own value for key "${key}" in ${shortPath}`);
    }
  });
};

// Define configs to generate (optional keys end with '?')
const generatedConfigs = [
  { shortPath: 'client/nodejs/hello-world/config.js', keys: ['trustchainId', 'url?'] },
  { shortPath: 'client/web/api-observer/src/config.js', keys: ['trustchainId', 'url?'] },
  { shortPath: 'client/web/notepad/src/config.js', keys: ['trustchainId', 'url?'] },
  { shortPath: 'client/web/tutorial/src/config.js', keys: ['trustchainId', 'url?'] },
  { shortPath: 'server/src/config.js', keys: ['trustchainId', 'trustchainPrivateKey'] }
];

// Add sample and full pathes to configs
generatedConfigs.forEach(c => {
  c.fullPath = pathLib.join(__dirname, '..', c.shortPath);
  c.samplePath = c.shortPath.slice(0, -3) + '.sample.js';
});

// Try to find one and only one JSON file in config/ (obtained from
// Tanker's dashboard), and use it to generate configs.
const mainConfigDir = pathLib.join(__dirname, '..', 'config');
const mainConfigFiles = fs.readdirSync(mainConfigDir).filter(f => f.match(/\.json$/));

if (mainConfigFiles.length === 0) {
  addError([
    'Welcome to the Tanker quickstart examples project.',
    '\nTo run the example server and applications, you need to:',
    '  - create a Trustchain on the Tanker dashboard (https://dashboard.tanker.io)',
    '  - download the JSON configuration file of this Trustchain',
    '  - copy this JSON configuration file under the config/ folder of this project',
    '\nThen, you\'ll be ready to re-run your command.'
  ].join('\n'));

} else if (mainConfigFiles.length > 1) {
  addError([
    'It looks like you have multiple config/*.json files, which is ambiguous.',
    'Please keep only one of these files in config/ to define the Trustchain you want to use.',
    'Then, you\'ll be ready to re-run your command.'
  ].join('\n\n'));

} else {
  const mainConfigFile = mainConfigFiles[0];
  const mainConfigFilePath = pathLib.join(mainConfigDir, mainConfigFile);
  let formatError = null;
  let values;

  try {
    values = JSON.parse(fs.readFileSync(mainConfigFilePath));
  } catch (e) {
    console.error(e);
    console.log(''); // skip line
    formatError = e;
  }

  if (formatError || !('trustchainId' in values) || !('trustchainPrivateKey' in values)) {
    addError([
      `Malformed Truschain configuration file: config/${mainConfigFile}`,
      'This file should be in JSON format and contain the "trustchainId" and "trustchainPrivateKey" fields.',
    ].join('\n\n'));

  } else {
    // Keys ok, use them to create missing files
    generatedConfigs.forEach(config => createConfigFile(config, values, false));
  }

  // Check content of config files
  generatedConfigs.forEach(config => {
    if (checkFilePresent(config)) {
      checkFileContent(config);
    }
  });
}

// Print collected errors if any
let message = `Checked formatting of ${generatedConfigs.length} config files:`;

const l = errors.length;

if (l > 0) {
  const errorList = errors.map((e, index) => `${index + 1}. ${e.replace(/\n/gm, '\n   ')}`);
  message += ` found ${l} problem${l > 1 ? 's' : ''}!\n\n`;
  message += `${errorList.join('\n\n')}\n`;
  console.log(message);
  process.exitCode = 1;
} else {
  console.log(`${message} no problem found!`);
}
